version: '3'

services:
    # Serve static webpages and proxy to APIs
    # CRA dev server in dev and nginx in production
    webserver:
        build:
            context: .
            dockerfile: ./client/Dockerfile
            target: ${NODE_ENV} # Determine dev or prod
        container_name: webserver
        restart: unless-stopped
        ports:
            - 80:${INNER_PORT} # Expose ports
            - 443:443
        networks:
            - app-network
        depends_on: # Don't want to proxy requests until the servers are up 
            - api
            - live
        volumes:
            - /etc/letsencrypt:/etc/letsencrypt # ssl certs
            - ./client:/home/node/app
            - /home/node/app/node_modules

    api:
        build:
            context: .
            dockerfile: ./server/Dockerfile
        container_name: api
        env_file: .env
        environment:
            - NODE_ENV=$NODE_ENV
            - DB_USER=$DB_USER
            - DB_PASS=$DB_PASS
            - DB_HOST=db
            - DB_PORT=$DB_PORT
            - DB_NAME=$DB_NAME
            - REDIS_HOST=redis
            - REDIS_PORT=$REDIS_PORT
        networks:
            - app-network
        depends_on:
            - db
            - redis
        command: 
            ./node_modules/.bin/nodemon app.js # nodemon for restart in debugging
        volumes:
            - ./server:/home/node/app
            - /home/node/app/node_modules
    
    leader:
        build:
            context: .
            dockerfile: ./server/Dockerfile
        container_name: leader
        env_file: .env
        environment:
            - NODE_ENV=$NODE_ENV
            - DB_USER=$DB_USER
            - DB_PASS=$DB_PASS
            - DB_HOST=db
            - DB_PORT=$DB_PORT
            - DB_NAME=$DB_NAME
            - REDIS_HOST=redis
            - REDIS_PORT=$REDIS_PORT
        networks:
            - app-network
        depends_on:
            - db
            - redis
        command: 
            ./node_modules/.bin/nodemon workers/leader.worker.js
        volumes:
            - ./server:/home/node/app
            - /home/node/app/node_modules

    offer:
        build:
            context: .
            dockerfile: ./server/Dockerfile
        container_name: offer
        env_file: .env
        environment:
            - NODE_ENV=$NODE_ENV
            - DB_USER=$DB_USER
            - DB_PASS=$DB_PASS
            - DB_HOST=db
            - DB_PORT=$DB_PORT
            - DB_NAME=$DB_NAME
            - REDIS_HOST=redis
            - REDIS_PORT=$REDIS_PORT
        networks:
            - app-network
        depends_on:
            - db
            - redis
        command: 
            ./node_modules/.bin/nodemon workers/offer.worker.js
        volumes:
            - ./server:/home/node/app
            - /home/node/app/node_modules

    live:
        build:
            context: .
            dockerfile: ./server/Dockerfile
        container_name: live
        env_file: .env
        environment:
            - NODE_ENV=$NODE_ENV
            - DB_USER=$DB_USER
            - DB_PASS=$DB_PASS
            - DB_HOST=db
            - DB_PORT=$DB_PORT
            - DB_NAME=$DB_NAME
            - REDIS_HOST=redis
            - REDIS_PORT=$REDIS_PORT
            - PORT=$LIVE_PORT
        networks:
            - app-network
        depends_on:
            - db
            - redis
        command: 
            ./node_modules/.bin/nodemon workers/live.worker.js
        volumes:
            - ./server:/home/node/app
            - /home/node/app/node_modules

    db: # Postgres with Timescale extension
        image: timescale/timescaledb:latest-pg12
        container_name: db
        restart: unless-stopped
        env_file: .env
        environment:
            - POSTGRES_USER=$DB_USER
            - POSTGRES_PASSWORD=$DB_PASS
            - POSTGRES_DB=$DB_NAME
        volumes:
          - dbdata:/data/db
          - ./server/db/dbinit.sql:/docker-entrypoint-initdb.d/dbinit.sql # DB initialization script
        networks:
          - app-network

    redis:
        image: redis
        container_name: redis
        env_file: .env
        networks:
            - app-network

networks:
    app-network:
        driver: bridge

volumes:
    dbdata:
